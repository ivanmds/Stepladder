startup:
  #httpClientAuthentication:
  #  - id: "api_integration_pix"
  #    type: clientCredential
  #    clientId: ""
  #    clientSecret: ""
  #    endpointAuth: ""
  #    valueFrom: declared

  #apiSecuret:
  #  type: basic
  #  user: admin
  #  password: 123456
  #  valueFrom: declared
  
#  connections:
#    kafka:
#      valueFrom:
#    redis:
#      valueFrom:


entrypoints:
  routes:
  - route: "api/customers/{id}"
    method: get
    enableAnonymous: true
    flowActionId: get_customer
  
  - route: "api/hello"
    method: get
    enableAnonymous: true
    responseMock:
      bodyValue: "{\"Message\":\"Hello\"}"
      contentType: "application/json"
      statusCode: 200
    
#  consumers:
#    kafka:
#      - groupId:
#        topicName:
#        actionId: {id}

actions:
  - id: get_customer_action
    type: httpRequest
    uri: 'http://localhost:8080/customers/{id}'
    method: get
    routeMaps:
      - routeKey: '{id}'
        fromType: httpRequest
    reponseContractMapId: customer_response
    #autenticationId: 10
  
#  - id: 2
#    type: kafkaConsumer
#    topicName: 'stepladder.test.request'
#    groupId: ''

flowActions:
  - id: get_customer
    actionsId:
      - get_customer_action

contractMaps:
  - id: customer_response
    mapFromTo:
      - "name:person.Name"
      - "motherName:person.motherName"
      - "birthdate:person.birthdate" 
      #- "addresses.street:rua"
      #- "addresses.number:numero"
    #remove:
    #  - address.address

#strategies:
#  - cache:
#      id: redisCache_22
#      type: redis

#  - httpIdempotency:
#      id: idemp_55
#      ttl: 60s
#      provider: 
#        type: redis
#        id: redisCache_22
#      mapFields:
#        - "customer.id"

#validations:
#  - id: 8001
#    fields:
#    - name: "customer.name"
#      type: Required
#    - name: "customer.name"
#      type: biggerThen
#      size: 10